#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/stp.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/pointing.h>

#include "zmk-helpers/helper.h"

#define L00  0  // left-first row
#define L01  1
#define L02  2
#define L03  3
#define L04  4
#define L05  5
#define L06  6

#define R00  7  // right-first row
#define R01  8
#define R02  9
#define R03 10
#define R04 11
#define R05 12
#define R06 13

#define L10 14  // left-second row
#define L11 15
#define L12 16
#define L13 17
#define L14 18
#define L15 19
#define L16 20

#define R10 21  // right-second row
#define R11 22
#define R12 23
#define R13 24
#define R14 25
#define R15 26
#define R16 27

#define L20 28  // left-third row
#define L21 29
#define L22 30
#define L23 31
#define L24 32
#define L25 33
#define L26 34

#define R20 39  // right-third row
#define R21 40
#define R22 41
#define R23 42
#define R24 43
#define R25 44
#define R26 45

#define L30 46  // left-fourth row
#define L31 47
#define L32 48
#define L33 49
#define L34 50
#define L35 51

#define R30 54  // right-fourth row
#define R31 55
#define R32 56
#define R33 57
#define R34 58
#define R35 59

#define L40 60  // left-fifth row
#define L41 61
#define L42 62
#define L43 63
#define L44 64

#define R40 71  // right-fifth row
#define R41 72
#define R42 73
#define R43 74
#define R44 75

#define LT00 35  // left thumb keys
#define LT01 36
#define LT10 52
#define LT20 65
#define LT21 66
#define LT22 67


#define RT00 37  // right thumb keys
#define RT01 38
#define RT10 53
#define RT20 68
#define RT21 69
#define RT22 70

#define KEYS_L  L00  L01  L02  L03  L04  L05  L06 \
                L10  L11  L12  L13  L14  L15  L16 \
                L20  L21  L22  L23  L24  L25  L26 \
                L30  L31  L32  L33  L34  L35      \
                L40  L41  L42  L43  L44

#define THUMBS_LEFT      LT00 LT00 \
                              LT10 \
                    LT20 LT21 LT22 \

#define KEYS_R  R00  R01  R02  R03  R04  R05  R06 \
                R10  R11  R12  R13  R14  R15  R16 \
                R20  R21  R22  R23  R24  R25  R26 \
                R30  R31  R32  R33  R34  R35      \
                R40  R41  R42  R43  R44

#define THUMBS_RIGHT     RT00 RT00 \
                              RT10 \
                    RT20 RT21 RT22 \

#define QUICK_TAP_MS 175

#define TAB_RT RC(TAB)
#define TAB_LT LC(LS(TAB))

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS_LEFT) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS_RIGHT) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LG(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LG(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

ZMK_HOLD_TAP(up_ralt, bindings = <&kp>, <&kp>; MT_CORE)
// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Caps-word & auto-layers */

// Tap: sticky-shift | Shift + tap/ double-tap: caps-word | Hold: shift.
ZMK_MOD_MORPH(smart_shft,
  bindings = <&sk LSHFT>, <&caps_word>;
  mods = <(MOD_LSFT)>;
)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

/* Custom behaviors */

// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(swapper, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
              ignored-key-positions = <L44>;)

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
/* ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced"; */
/*              tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;) */
/* SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc) */
/* ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>; */
/*           tap-ms = <5>;) */

// Tap: space | Hold: nav layer
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&kp>; flavor = "balanced"; 
              tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)

/ {
    behaviors {
      #include "macros.dtsi"
      #include "version.dtsi"

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      display-name = "Base";
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                           &mo 3 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &tog 4                                                           &none &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
        &kp ESC   &hml LCTRL A   &hml LALT S   &hml LGUI D  &hml LSHFT F      &kp G  &none           &kp LGUI &kp LCTRL &kp LALT  &kp LGUI           &kp ESC &kp H  &hmr RSHFT J  &hmr LGUI K  &hmr LALT L   &hmr LCTRL SEMI &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                            &kp HOME &kp PG_UP                           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &mo 2     &kp GRAVE &none  &none &none                  &lt_spc 2 SPC &bs_del   &kp END  &kp PG_DN &kp ENTER &smart_shft          &kp RALT &none  &kp LBKT &kp RBKT &mo 2
      >;
    };
    keypad {
      display-name = "Kp";
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &trans                                                           &mo 3 &kp N6 &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                            &none &kp Y  &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp BSLH
        &kp ESC   &hml LCTRL A   &hml LALT S   &hml LGUI D  &hml LSHFT F      &kp G  &none           &kp LGUI &kp LCTRL &kp LALT  &kp LGUI           &kp ESC &kp H  &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                            &kp HOME &kp PG_UP                           &kp N  &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &kp RSHFT
      &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &lt_spc 2 SPC &kp BSPC   &kp END  &kp PG_DN &kp ENTER &kp KP_N0              &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo 2
      >;
    };
    fn {
      display-name = "Fn";
      bindings = <
        &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &tog 1                                           &mo 3 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
        &trans &kp TAB_LT &kp TAB_RT &swapper &kp LS(TAB) &trans  &none                                           &none &trans &kp HOME NAV_UP &kp PG_UP  &trans  &trans
        &trans &Win_Select_All &trans &trans &trans &kp LG(Q)  &none        &trans &trans &trans &trans        &none &caps_word NAV_LEFT NAV_DOWN NAV_RIGHT  NAV_DEL  &trans
        &trans &Win_Undo &Win_Cut &Win_Copy &Win_Paste &trans                      &trans &trans                     &trans &kp END &kp INS &kp PG_DN  &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };
    mod {
      display-name = "Mod";
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                     &trans                 &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none        &none        &bootloader                                                               &bootloader            &none        &none        &none        &none &none &none
        &studio_unlock &none        &none        &none        &none        &none        &none                   &none &none &bt BT_CLR &none                      &stp STP_BAT &none        &none        &none        &none &none &none
        &none &none        &none        &none        &macro_ver   &none                                      &none &none                                                        &none        &none        &none        &none &none &none
        &none &none        &none        &none        &none                                       &none &none &none &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none &none &none
      >;
    };
    tap_only {
      display-name = "Tap-only";
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog 1                                                           &mo 3 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &tog 4                                                           &none &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
        &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none           &kp LGUI &kp LCTRL &kp LALT  &kp LGUI          &kp ESC &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B                            &kp HOME &kp PG_UP                           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &mo 2     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp SPC &kp ENTER  &kp DEL  &kp PG_DN &kp ENTER &kp RSHFT          &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo 2
      >;
    };
    extra1 { 
      display-name = "Red";    
      status = "reserved";
    };

    extra2 { 
      display-name = "Purple";    
      status = "reserved";
    };

    extra3 { 
      display-name = "Cyan";    
      status = "reserved";
    };

    extra4 { 
      display-name = "Yellow";    
      status = "reserved";
    };
  };
};
